ungroup() %>%
mutate(i = 1:nrow(.))
klib <- data.table(KprotectedPerCell_Library)
area_fun <- function(i){
stock_k <- tibble(numid =1:ncol(klib), k = as.numeric(klib[i,])) %>%
filter(k > 0)
a = ShortCoord_Sort %>%
mutate(numid = as.numeric(ID)) %>%
filter(numid %in% stock_k$numid) %>%
left_join(stock_k, by = "numid")
# a = ShortCoord_Sort %>%
#   sf::st_as_sf(coords = c("lon", "lat"),
#                crs = sf::st_crs(land_shp_moll)) %>%
#     mutate(numid = as.numeric(ID)) %>%
#   filter(numid %in% stock_k$numid) %>%
#   ggplot() +
#   geom_sf(
#     data = land_shp_moll,
#     fill = "black",
#     lwd = 0,
#     inherit.aes = F
#   ) + theme(panel.grid.major = element_line(colour = 'transparent')) +
#   geom_sf(aes(color = sign), size = .1)
#
#
# a
#
out <- a %>%
summarise(p_area_protected = mean(sign),
p_k_protected = weighted.mean(sign, k))
}
ram_stocks <- ram_stocks %>%
mutate(p_protected = map(i, area_fun))
ram_stocks_protected_plot <- ram_stocks %>%
unnest(cols = p_protected) %>%
ggplot(aes(p_k_protected)) +
geom_histogram() +
scale_y_continuous(name = "# of RAM Stocks",expand = c(0,NA)) +
scale_x_continuous(labels = scales::percent,
name = "% of RAM  Stock's K inside Food-Increasing MPA")
ram_stocks_protected_plot
# proportion of RAM stocks closed
i <- 43
MegaData$stockid[i]
ShortCoord_Sort %>%
sf::st_as_sf(coords = c("lon", "lat"),
crs = sf::st_crs(land_shp_moll)) %>%
filter(ID %in% which(KprotectedPerCell_Library[i, ] > 0)) %>%
ggplot() +
geom_sf(data = land_shp_moll, fill="black", lwd = 0, inherit.aes = F)+ theme(panel.grid.major = element_line(colour = 'transparent')) +
geom_sf(color = "red")
# ok looks like those match up well to the free database so can use those for now
#  let's calculate the percent of non-tuna area inside an MPA and see what that looks like
# plot a point map showing points that are inside a non-tuna ram stock.
ram_stocks <- MegaData %>%
ungroup() %>%
mutate(i = 1:nrow(.))
klib <- data.table(KprotectedPerCell_Library)
area_fun <- function(i){
stock_k <- tibble(numid =1:ncol(klib), k = as.numeric(klib[i,])) %>%
filter(k > 0)
a = ShortCoord_Sort %>%
mutate(numid = as.numeric(ID)) %>%
filter(numid %in% stock_k$numid) %>%
left_join(stock_k, by = "numid")
# a = ShortCoord_Sort %>%
#   sf::st_as_sf(coords = c("lon", "lat"),
#                crs = sf::st_crs(land_shp_moll)) %>%
#     mutate(numid = as.numeric(ID)) %>%
#   filter(numid %in% stock_k$numid) %>%
#   ggplot() +
#   geom_sf(
#     data = land_shp_moll,
#     fill = "black",
#     lwd = 0,
#     inherit.aes = F
#   ) + theme(panel.grid.major = element_line(colour = 'transparent')) +
#   geom_sf(aes(color = sign), size = .1)
#
#
# a
#
out <- a %>%
summarise(p_area_protected = mean(sign & (rank < 5)),
p_k_protected = weighted.mean(sign & (rank < 5), k))
}
ram_stocks <- ram_stocks %>%
mutate(p_protected = map(i, area_fun))
top_5_ram_stocks_protected_plot <- ram_stocks %>%
unnest(cols = p_protected) %>%
ggplot(aes(p_k_protected)) +
geom_histogram() +
scale_y_continuous(name = "# of RAM Stocks",expand = c(0,NA)) +
scale_x_continuous(labels = scales::percent,
name = "% of RAM  Stock's K inside Food-Increasing MPA")
top_5_ram_stocks_protected_plot
##SELECT SCENARIO --- there are four scenarios
scenario<-"BAU1"
#scenario<-"OAconstant"
#scenario<-"EBvK01fin"
#scenario<-"all managed"
#Load MOLLWEIDE projected data
MegaData<-readRDS(file = here("data","MegaData.rds"))
Cleanmegacell<-readRDS(file = here("data","Cleanmegacell_mollweide.rds"))
CleanCoordmegacell<-readRDS(file = here("data","CleanCoordmegacell_mollweide.rds"))
KprotectedPerCell_Library<-readRDS(file = here("data","KprotectedPerCell_Library_mollweide.rds"))
MPA_coord<-readRDS(file= here("data","MPA_coord_mollweide.rds")) #this is my code
land_shp_moll<-readRDS(file = here("data","land_shp_moll.rds"))
head(MPA_coord)
dim(MPA_coord)
# pull up RAM data sued here
#
# load_ramlegacy()
RAMDATA <- load_ramlegacy(tables = "timeseries_values_views")
head(RAMDATA$timeseries_values_views)
RAMDATA2 <- RAMDATA$timeseries_values_views
head(RAMDATA2)
colnames(RAMDATA2)
ram_bau <- RAMDATA2 %>% select(stockid, year, UdivUmsypref,UdivUmgtpref) %>%
janitor::clean_names() %>%
mutate(udiv_umsypref = ifelse(is.na(udiv_umsypref) & !is.na(udiv_umgtpref),udiv_umgtpref, udiv_umsypref)) %>%
group_by(stockid) %>%
filter(!is.na(udiv_umsypref)) %>%
filter(year == max(year)) %>%
select(-year, -udiv_umgtpref)
og_mega_data <- MegaData
MegaData <- MegaData %>%
left_join(ram_bau, by = "stockid")
# convert RAM F/Fmsy into F, accorindg to Cabral model
MegaData$u_bau_ram = MegaData$udiv_umsypref * (MegaData$r / 2)
hist(MegaData$u_bau_ram)
MegaData$ram_escapement_bau = 1 - MegaData$u_bau_ram
MegaData %>%
filter(Manage == 1) %>%
ggplot(aes(Efin_BAU1, ram_escapement_bau)) +
geom_point() +
geom_abline(slope = 1, intercept = 0)
MegaData$Efin_BAU1[MegaData$Manage == 1] <- MegaData$ram_escapement_bau[MegaData$Manage == 1]
MegaData %>%
filter(Manage == 1) %>%
ggplot(aes(Efin_BAU1, ram_escapement_bau)) +
geom_point() +
geom_abline(slope = 1, intercept = 0)
plot(og_mega_data$Efin_BAU1[og_mega_data$Manage == 1],MegaData$Efin_BAU1[MegaData$Manage == 1])
plot(og_mega_data$Efin_BAU1[og_mega_data$Manage == 0],MegaData$Efin_BAU1[MegaData$Manage == 0])
KprotectedPerCell_Library <- KprotectedPerCell_Library[!is.na(MegaData$Efin_BAU1),]
MegaData <- MegaData %>%
filter(!is.na(Efin_BAU1))
#get MPA positions
CleanCoordmegacell_MPA<-left_join(CleanCoordmegacell,MPA_coord,by=c("lon","lat"))
head(CleanCoordmegacell_MPA)
dim(CleanCoordmegacell_MPA)
sum(CleanCoordmegacell_MPA$MPA,na.rm=T)
#positions of 1s (MPAs)
MPAposition<-which(CleanCoordmegacell_MPA$MPA==1)
head(MPAposition)
length(MPAposition)#2931 --- 2.44% are MPAs
length(MPAposition)*100/dim(Cleanmegacell)[1]
##TRY new approach
numcell<-dim(Cleanmegacell)[1]
celltoiterateFULL<-1:numcell
MPAselect0<-matrix(0, nrow=numcell, ncol=1)
PriorityAreas<-c()
NetworkResult<-vector()
#Make MPAselect0==1 for MPAs
MPAselect0[MPAposition]<-1
head(MPAselect0)
sum(MPAselect0)
#remove MPAs from celltoiterateFULL
celltoiterateFULL<-celltoiterateFULL[-MPAposition]
celltoiterate<-celltoiterateFULL
ncell<-length(celltoiterate)
###Compute spillover---PIXEL-LEVEL spillover
K<-MegaData$Kfin # K per species
m<-MegaData$m # mobility per species
r<-MegaData$r
if (scenario=="all managed"){
E<-MegaData$Emsy
}else if(scenario=="OAconstant"){
E<-MegaData$Efin
}else if(scenario=="BAU1"){
E<-MegaData$Efin_BAU1
}else if(scenario=="Efin_msy"){
E<-MegaData$Efin_msy
}else if(scenario=="EBvK01fin"){
E<-MegaData$EBvK01fin
}
ER<-1-E
ER<-1*(ER>1) + ER*(ER<=1)
max(ER)
min(ER)
MPAselect<-MPAselect0
R<-rowSums(KprotectedPerCell_Library[,which(MPAselect==1),drop=FALSE])
ER_redistribute<-1-(1-ER)^(1/(1-R))
b_outside_bau <-
((m * K * (1 - R)) / (ER_redistribute * R + m)) * (1 - (ER_redistribute * (1 - R) * m) /
((ER_redistribute + m) * r))
hbau<-na.omit(ER_redistribute*((m*K*(1-R))/((ER_redistribute*R)+m))*(1-((ER_redistribute*(1-R)*m)/(((ER_redistribute*R)+m)*r))))
hbau<-hbau*(hbau>0)
HBAU<-sum(hbau)
HBAU
PICKSIZE<-100 #number of MPA sites selected
nmax<-floor(length(celltoiterate)/PICKSIZE)
nmax #this is the number of iterations needed for PICKSIZE at a time!
Eevolve<-matrix(nrow=nmax,ncol=dim(MegaData)[1])
# k_per_cell <- t(as.datKprotectedPerCell_Library)
dhmpa_stockish <- matrix(NA, nrow = nmax, ncol = nrow(KprotectedPerCell_Library))
if (run_corrected_cabral_et_al){
cores<-detectCores() - 2
registerDoParallel(cores)
for (i in 1:nmax){
MPAselectPrev<-rowSums(KprotectedPerCell_Library[,which(MPAselect0==1),drop=FALSE])
a <- Sys.time()
result <- foreach(iter = 1:length(celltoiterate), .combine = rbind) %dopar% {
MPAselect<-MPAselect0
MPAselect[celltoiterate[iter]]<-1
R<-MPAselectPrev+KprotectedPerCell_Library[,celltoiterate[iter]]
ER_redistribute<-1-(1-ER)^(1/(1-R))
hmpa<-na.omit(ER_redistribute*((m*K*(1-R))/((ER_redistribute*R)+m))*(1-((ER_redistribute*(1-R)*m)/(((ER_redistribute*R)+m)*r))))
hmpa<-hmpa*(hmpa>0)
HMPA<-sum(hmpa)
HMPA-HBAU
}
Sys.time() - a
#1. find the location of the top 1000 highest pixel-level
myorderHightoLow<-order(-result)#positions
cellselected<-myorderHightoLow[1:PICKSIZE] #but these are the position of the temporary pixels, not our reference pixels
#convert coord to scale comparable to priority areas
Prioritycellselected<-celltoiterate[cellselected]
#3. block those additional 100 in MPAselect
MPAselect0[Prioritycellselected]<-1
#4. save them for our priority areas
PriorityAreas<-append(PriorityAreas,Prioritycellselected)
#5. Calculate food prov of the additional 100 cells
MPAselect<-MPAselect0
R<-rowSums(KprotectedPerCell_Library[,which(MPAselect==1),drop=FALSE])
ER_redistribute<-1-(1-ER)^(1/(1-R))
hmpa<-na.omit(ER_redistribute*((m*K*(1-R))/((ER_redistribute*R)+m))*(1-((ER_redistribute*(1-R)*m)/(((ER_redistribute*R)+m)*r))))
hmpa<-hmpa*(hmpa>0)
dhmpa_stockish[i,] <- hmpa - hbau
HMPA<-sum(hmpa)
#save result. Comment other parts not needed now.
NetworkResult[i]<-HMPA-HBAU
Eevolve[i,]<-ER_redistribute
#pass this to the top
celltoiterate<-celltoiterateFULL[!celltoiterateFULL %in% PriorityAreas]#celltoiterateFULL[-PriorityAreas]#bacause Prioritycellselected are real numbers, not rank
print(c(i,NetworkResult[i]))
rm(result,myorderHightoLow,cellselected,Prioritycellselected, MPAselect,R,hmpa,HMPA)
}
plot(NetworkResult)
stopImplicitCluster()
if(scenario=="BAU1"){
saveRDS(
NetworkResult,
file = file.path(
results_path,
"corrected_NetworkResult100_BAU1_mollweide.rds"
)
)
saveRDS(
PriorityAreas,
file = file.path(
results_path,
"corrected_PriorityAreas100_BAU1_mollweide.rds"
)
)
saveRDS(dhmpa_stockish,
file = file.path(results_path, "corrected_stockish_results_bau1.rds"))
}else if(scenario=="all managed"){
saveRDS(NetworkResult,file = "~/foodGCEfile/NetworkResult100_allmanaged_redistribute.rds")
saveRDS(PriorityAreas,file = "~/foodGCEfile/PriorityAreas100_allmanaged_redistribute.rds")
}else if(scenario=="OAconstant"){
saveRDS(NetworkResult,file = "~/foodGCEfile/NetworkResult100_OAconstant_mollweide_redistribute.rds")
saveRDS(PriorityAreas,file = "~/foodGCEfile/PriorityAreas100_OAconstant_mollweide_redistribute.rds")
}else if(scenario=="EBvK01fin"){
saveRDS(NetworkResult,file = "~/foodGCEfile/NetworkResult100_EBvK01fin_mollweide_redistribute.rds")
saveRDS(PriorityAreas,file = "~/foodGCEfile/PriorityAreas100_EBvK01fin_mollweide_redistribute.rds")
}
} else {
NetworkResult <-readRDS(file = file.path(results_path,"corrected_NetworkResult100_BAU1_mollweide.rds"))
PriorityAreas <- readRDS(file = file.path(results_path,"corrected_PriorityAreas100_BAU1_mollweide.rds") )
}
PICKSIZE<-100
BenefitCurve<-as.data.frame(NetworkResult)/1000000
MPAsize<-(length(MPAposition)+1)*100/dim(Cleanmegacell)[1]
#(MPAinEEZ+1)*100/length(EEZposition)#there is +1 because the next pixel starts with +1
BenefitCurve$MPA <- rescale(seq.int(nmax), to = c(MPAsize, 100))
zerozero<-data.frame(0,0)
names(zerozero)<-c("NetworkResult","MPA")
zerozero[1,]<-c(-HBAU/(1000000),100)
BenefitCurve<-rbind(BenefitCurve,zerozero)
theme_set(theme_cowplot())
corrected_benefitplot<-ggplot(BenefitCurve, aes(MPA, NetworkResult)) +geom_line(col="blue")+# theme_classic()+
labs(x="% EEZ protected",y="Change in catch (MMT)",title=paste("Global (max =", round(max(BenefitCurve$NetworkResult),2),"MMT)"))#+geom_hline(yintercept = 0)
corrected_benefitplot
Priority<-as.data.frame(PriorityAreas)
Priority$rank <- ((seq.int(nrow(Priority))/ncell))*100
#add dh
NetworkResult_prime<-as.data.frame(NetworkResult)
dH_prime<-NetworkResult_prime %>% mutate(dH = NetworkResult - lag(NetworkResult, default = 0))
plot(dH_prime$dH)
Priority$NetworkResult<-rep(NetworkResult, each=PICKSIZE) ## this is adding delta H
Priority$dH<-rep(dH_prime$dH/PICKSIZE, each=PICKSIZE) ## this is adding delta H
head(Priority)
dim(Priority)
PriorityFrame <- as.data.frame(seq.int(nrow(CleanCoordmegacell)))
names(PriorityFrame) <- "PriorityAreas"
#add the priority
PriorityFrame2<-left_join(PriorityFrame,Priority, by="PriorityAreas")
PriorityFrame2[is.na(PriorityFrame2)] <- 0
head(PriorityFrame2)
dim(PriorityFrame2)
ShortCoord<-CleanCoordmegacell
ShortCoord$rank<-PriorityFrame2$rank
ShortCoord$NetworkResult<- PriorityFrame2$NetworkResult#this is for deriving dh
ShortCoord$dH<- PriorityFrame2$dH#this is for deriving dh
ShortCoord$ID<-row.names(ShortCoord)
dim(ShortCoord)
head(ShortCoord)
ShortCoord_Sort <- ShortCoord[order(-ShortCoord$rank),] %>% filter(rank!=-1000)
ShortCoord_Sort$sign<-ShortCoord_Sort$dH>0
InflectPoint<-min(which(ShortCoord_Sort$sign == TRUE))
InflectMPA<-ShortCoord_Sort$rank[InflectPoint]
# this is broken becuase of the ranking plot error
MPAcoverage<-ShortCoord_Sort %>% ggplot(aes(x=lon,y=lat,fill=dH)) + #scale_fill_gradient2(low="darkred", mid="white",high="#00539CFF",midpoint = 0, space = "Lab",na.value = "grey50", guide = "colourbar", aesthetics = "fill",name=expression(paste(Delta, "H (MT)")))+
scale_fill_gradientn(colours = c("forestgreen", "white", "orange"), limits=c(0,100), values = scales::rescale(c(min(ShortCoord_Sort$rank), InflectMPA, max(ShortCoord_Sort$rank))),name="Protection sequence")+
theme(axis.title.x = element_blank(),axis.title.y = element_blank(), panel.background = element_blank(),legend.position=c(0.63, 0.05), legend.direction = "horizontal")+ #"bottom
geom_raster()+
geom_raster(data=MPA_coord, aes(x=lon, y=lat),fill="cyan")+  #"#EEA47FFF"
geom_sf(data = land_shp_moll, fill="black", lwd = 0, inherit.aes = F)+ theme(panel.grid.major = element_line(colour = 'transparent'))
MPAcoverage
clean_MPAcoverage<-ShortCoord_Sort %>% ggplot(aes(x=lon,y=lat,fill=dH)) + #scale_fill_gradient2(low="darkred", mid="white",high="#00539CFF",midpoint = 0, space = "Lab",na.value = "grey50", guide = "colourbar", aesthetics = "fill",name=expression(paste(Delta, "H (MT)")))+
# scale_fill_gradientn(colours = c("forestgreen", "white", "orange"), limits=c(0,100), values = scales::rescale(c(min(ShortCoord_Sort$rank), InflectMPA, max(ShortCoord_Sort$rank))),name="Protection sequence")+
theme(axis.title.x = element_blank(),axis.title.y = element_blank(), panel.background = element_blank(),legend.position=c(0.63, 0.05), legend.direction = "horizontal")+ #"bottom
geom_raster()+
geom_raster(data=MPA_coord, aes(x=lon, y=lat),fill="cyan")+  #"#EEA47FFF"
geom_sf(data = land_shp_moll, fill="black", lwd = 0, inherit.aes = F)+ theme(panel.grid.major = element_line(colour = 'transparent')) +
scale_fill_gradient2(low = "tomato", mid = "white", high = "forestgreen",
midpoint = 0)
clean_MPAcoverage
msyframe <- matrix(rep(MegaData$MSYfin, ncol(KprotectedPerCell_Library)), nrow = length(MegaData$Kfin), ncol = ncol(KprotectedPerCell_Library))
msy_per_cell <- colSums(KprotectedPerCell_Library * msyframe)
tmp <- ShortCoord %>%
mutate(msy_per_cell = msy_per_cell) %>%
sf::st_as_sf(coords = c("lon", "lat"),
crs = sf::st_crs(land_shp_moll))
tmp %>%
ggplot(aes(color = msy_per_cell)) +
geom_sf(data = land_shp_moll, fill="black", lwd = 0, inherit.aes = F)+ theme(panel.grid.major = element_line(colour = 'transparent')) +
geom_sf(size = .1) +
scale_color_viridis_c()
cumu <- tibble(msy_per_cell = msy_per_cell) %>%
arrange(desc(msy_per_cell)) %>%
mutate(cumulative_msy = cumsum(msy_per_cell)) %>%
mutate(patch = 1:nrow(.)) %>%
mutate(ppatch = patch / nrow(.))
cumu %>%
ggplot(aes(ppatch, cumulative_msy)) +
geom_line() +
scale_x_continuous(labels = percent, name = "% of Patches") +
scale_y_continuous(labels = comma, name = "Cumulative MSY")
eezs <-
sf::read_sf(here("data", "World_EEZ_v11_20191118_LR", "eez_v11_lowres.shp")) %>%
mutate(iso3_code = countrycode(SOVEREIGN1, "country.name",  "iso3c")) %>%
mutate(iso3c_name = countrycode(iso3_code, "iso3c",  "country.name")) %>%
filter(!is.na(iso3_code)) %>%
sf::st_transform(sf::st_crs(land_shp_moll))
a = eezs %>%
filter(ISO_TER1 == "CHN") %>%
ggplot() +
geom_sf(fill = "red") +
geom_sf(data = land_shp_moll, fill="black", lwd = 0, inherit.aes = F)+ theme(panel.grid.major = element_line(colour = 'transparent'))
# ggsave("test.png", a)
bau_mpas <- ShortCoord_Sort %>%
sf::st_as_sf(coords = c("lon", "lat"),
crs = sf::st_crs(land_shp_moll))
fao_country_captures <- fao_capture %>%
filter(capture_units == "t",
!str_detect(fao_area,"Inland waters")) %>%
group_by(country_name_en, iso3_code) %>%
filter(year == max(year)) %>%
summarise(capture = sum(capture, na.rm = TRUE)) %>%
arrange(desc(capture)) %>%
ungroup() %>%
mutate(capture_rank = percent_rank(capture)) %>%
arrange(desc(capture_rank)) %>%
mutate(cumu_capture = cumsum(capture)) %>%
mutate(first_half = cumu_capture < (max(cumu_capture) / 2),
p_global_h = capture / max(cumu_capture))
test <- sf::st_join(bau_mpas, eezs)
# MSY and sign per EEZ
spatial_msy <- tmp %>%
sf::st_join(eezs) %>%
filter(!is.na(iso3_code)) %>%
janitor::clean_names()
mean(spatial_msy$d_h > 0)
spatial_msy %>%
filter(!is.na(iso3c_name) & iso3c_name == "China") %>%
ggplot(aes(color = d_h)) +
geom_sf(show.legend = FALSE) +
geom_sf(data = land_shp_moll, fill="black", lwd = 0, inherit.aes = F)+ theme(panel.grid.major = element_line(colour = 'transparent'))
spatial_msy %>%
ggplot(aes(color = d_h)) +
geom_sf(show.legend = FALSE) +
geom_sf(data = land_shp_moll, fill="black", lwd = 0, inherit.aes = F)+ theme(panel.grid.major = element_line(colour = 'transparent')) +
scale_color_viridis_c()
p_eez_closed <- spatial_msy %>%
group_by(iso3c_name, iso3_code) %>%
summarise(
p_closed = mean(d_h > 0),
weighed_p_closed = weighted.mean(d_h > 0, w = msy_per_cell),
top_weighed_p_closed = weighted.mean(d_h > 0 &
rank < 5, w = msy_per_cell),
top_p_closed = mean(d_h > 0 & rank < 5)
) %>%
arrange(desc(p_closed)) %>%
left_join(fao_country_captures, by = c("iso3_code" = "iso3_code")) %>%
ungroup()
corrected_p_eez_closed_map <- p_eez_closed %>%
ggplot(aes(color = p_closed)) +
geom_sf(
data = land_shp_moll,
fill = "black",
lwd = 0,
inherit.aes = F
) + theme(panel.grid.major = element_line(colour = 'transparent')) +
geom_sf(size = .1) +
scale_color_viridis_c(labels = percent, name = "% of EEZ in food increasing MPA", guide = guide_colorbar(barwidth = unit(15,"lines"))) +
theme(legend.position = "top", legend.direction = "horizontal")
corrected_top_p_eez_closed_map <- p_eez_closed %>%
ggplot(aes(color = top_p_closed)) +
geom_sf(
data = land_shp_moll,
fill = "black",
lwd = 0,
inherit.aes = F
) + theme(panel.grid.major = element_line(colour = 'transparent')) +
geom_sf(size = .1) +
scale_color_viridis_c(labels = percent, name = "% of EEZ in food increasing MPA", guide = guide_colorbar(barwidth = unit(15,"lines"))) +
theme(legend.position = "top", legend.direction = "horizontal")
corrected_weighted_p_eez_closed_map <- p_eez_closed %>%
ggplot(aes(color = weighed_p_closed)) +
geom_sf(
data = land_shp_moll,
fill = "black",
lwd = 0,
inherit.aes = F
) + theme(panel.grid.major = element_line(colour = 'transparent')) +
geom_sf(size = .1) +
scale_color_viridis_c(labels = percent, name = "% of K-weighted EEZ in food increasing MPA", guide = guide_colorbar(barwidth = unit(15,"lines"))) +
theme(legend.position = "top", legend.direction = "horizontal")
corrected_p_eez_closed_plot <- p_eez_closed %>%
# filter(cumu_capture < 60e6) %>%
filter(capture_rank > 0.85) %>%
ggplot(aes(reorder(iso3c_name,p_closed), p_closed, fill = capture)) +
geom_col() +
coord_flip() +
scale_y_continuous(labels = percent, name =  "% of EEZ in food increasing MPA") +
scale_x_discrete(name = '') +
scale_fill_viridis_c(labels = comma)
corrected_top_p_eez_closed_plot <- p_eez_closed %>%
# filter(cumu_capture < 60e6) %>%
filter(capture_rank > 0.85) %>%
ggplot(aes(reorder(iso3c_name,top_p_closed), top_p_closed, fill = capture)) +
geom_col() +
coord_flip() +
scale_y_continuous(labels = percent, name =  "% of EEZ in food increasing MPA") +
scale_x_discrete(name = '') +
scale_fill_viridis_c(labels = comma)
# p_eez_closed_plot + top_p_eez_closed_plot
corrected_weighted_p_eez_closed_plot <- p_eez_closed %>%
# filter(cumu_capture < 60e6) %>%
filter(capture_rank > 0.85) %>%
ggplot(aes(reorder(iso3c_name, capture), weighed_p_closed, fill = capture)) +
geom_col() +
coord_flip() +
scale_y_continuous(labels = percent, name =  "% of EEZ in food increasing MPA") +
scale_x_discrete(name = '')
a = spatial_msy %>%
group_by(iso3c_name) %>%
arrange(desc(msy_per_cell)) %>%
mutate(cumu_msy =cumsum(msy_per_cell)) %>%
mutate(patch = 1:length(cumu_msy)) %>%
mutate(ppatch = patch / length(cumu_msy)) %>%
ungroup() %>%
group_by(iso3c_name) %>%
mutate(total_msy = max(cumu_msy)) %>%
ungroup()
corrected_cumu_msy_country_plot <- a %>%
ggplot(aes(ppatch, cumu_msy, color =total_msy)) +
geom_line() +
facet_wrap(~iso3c_name, scales = "free_y") +
theme_light() +
theme(axis.text = element_blank(),
strip.text = element_blank()) +
scale_x_continuous(name = "% of Patches") +
scale_y_continuous(name = "Cumulative MSY") +
labs(caption = "each facet is a country") +
scale_color_viridis_c(trans = "log10")
spcoords <- sf::st_coordinates(spatial_msy) %>%
as_tibble()
corrected_eez_cabralish_plot <- spatial_msy %>%
bind_cols(spcoords) %>%
ggplot(aes(x = X, y = Y,fill = d_h)) +
theme(axis.title.x = element_blank(),axis.title.y = element_blank(), panel.background = element_blank(),legend.position="bottom", legend.direction = "horizontal")+ #"bottom
geom_raster()+
geom_sf(data = land_shp_moll, fill="black", lwd = 0, inherit.aes = F)+ theme(panel.grid.major = element_line(colour = 'transparent')) +
scale_fill_gradient2(low = "red", mid = "gray80" , high = "forestgreen", midpoint = 0,
guide = guide_colorbar(barwidth = unit(15, "lines")))
corrected_eez_cabralish_plot
corrected_eez_cabralish_plot
corrected_p_eez_closed_plot
